<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[记录一个卡牌的旋转效果]]></title>
      <url>/2018/10/26/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%8D%A1%E7%89%8C%E7%9A%84%E6%97%8B%E8%BD%AC%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h3 id="先占个坑，抢饭回来填。"><a href="#先占个坑，抢饭回来填。" class="headerlink" title="先占个坑，抢饭回来填。"></a>先占个坑，抢饭回来填。</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[图片loading]]></title>
      <url>/2018/08/17/%E5%9B%BE%E7%89%87loading/</url>
      <content type="html"><![CDATA[<p>前几个月忙着暑假的项目就把blog给搁置了，今天失踪人口回归了～<br><br>回归的第一篇先从一个小问题讲起，图片的loading。<br><br><br>直接进入主题。</p>
<h3 id="图片loading的关键点"><a href="#图片loading的关键点" class="headerlink" title="图片loading的关键点"></a>图片loading的关键点</h3><p>loading的关键在于判断图片是否加载完成，image对象的onload属性恰好可以判断当前图片是否加在完成，所以我们可以利用这一点来实现loading，下面见代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function()&#123;</div><div class="line">    var img = new Image();</div><div class="line"></div><div class="line">    img.src= &quot;http://f12stag.kkmh.com/image/171124/oyf2p9qul.webp-w750.jpg&quot;</div><div class="line"></div><div class="line"></div><div class="line">    img.onload = function () &#123;</div><div class="line">        console.log(&apos;图片加载完成&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，完成。是不太简单了。。。对，就是这么简单。。。</p>
<p>在此基础上我们可以再加上判断白分比，还是简单粗暴直接看代码；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">imageLoader: function(options) &#123;</div><div class="line">        var loaded = 0,</div><div class="line">            imageUrls = options.items,</div><div class="line">            count = imageUrls.length,</div><div class="line">            progress = options.progress;</div><div class="line"></div><div class="line">        loadImage(loaded);</div><div class="line"></div><div class="line">        function loadImage(index) &#123;</div><div class="line">            if (index &lt; count) &#123;</div><div class="line">                var img = new Image();</div><div class="line">                img.src = imageUrls[index];</div><div class="line"></div><div class="line">                img.onload = function() &#123;</div><div class="line">                    loaded++;</div><div class="line">                    Math.round(loaded / count * 100) + &apos;%&apos;;</div><div class="line">                    loadImage(loaded);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125; else &#123;</div><div class="line">                options.callback();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;,</div><div class="line"></div><div class="line">loadImage: function () &#123;</div><div class="line">    (function (_this) &#123;</div><div class="line">            kkmh.imageLoader(&#123;</div><div class="line">                items: [</div><div class="line">                    &quot;http://f12stag.kkmh.com/image/171124/oyf2p9qul.webp-w750.jpg&quot;,</div><div class="line">                    &quot;http://f12stag.kkmh.com/image/150527/zbi2otthk.jpg-w640&quot;,</div><div class="line">                    &quot;http://f12stag.kkmh.com/image/150609/tl1p03qix.jpg-w640&quot;,</div><div class="line">                    &quot;http://f12stag.kkmh.com/image/180724/QazzMlEz10.png-w640&quot;</div><div class="line">                ],</div><div class="line">                callback: function () &#123;</div><div class="line">                    console.log(&apos;图片加载完成&apos;);</div><div class="line">                &#125;,</div><div class="line">            &#125;);</div><div class="line">    &#125;)(this);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>要去抢饭了，暂时先这么多，一会抢完饭回来继续完善～</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[用伪类::after和content实现不确定尺寸图片的垂直水平居中]]></title>
      <url>/2018/03/27/%E7%94%A8%E4%BC%AA%E7%B1%BB-after%E5%92%8Ccontent%E5%AE%9E%E7%8E%B0%E4%B8%8D%E7%A1%AE%E5%AE%9A%E5%B0%BA%E5%AF%B8%E5%9B%BE%E7%89%87%E7%9A%84%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<h4 id="用-after和content实现图片的居中是我认为的最好的实现图片居中的方法，不需要知道图片的尺寸，任意图片都能居中。进入正文前先说下什么是伪元素和伪类。"><a href="#用-after和content实现图片的居中是我认为的最好的实现图片居中的方法，不需要知道图片的尺寸，任意图片都能居中。进入正文前先说下什么是伪元素和伪类。" class="headerlink" title="用::after和content实现图片的居中是我认为的最好的实现图片居中的方法，不需要知道图片的尺寸，任意图片都能居中。进入正文前先说下什么是伪元素和伪类。"></a>用::after和content实现图片的居中是我认为的最好的实现图片居中的方法，不需要知道图片的尺寸，任意图片都能居中。进入正文前先说下什么是伪元素和伪类。</h4><h3 id="一：伪元素和伪类"><a href="#一：伪元素和伪类" class="headerlink" title="一：伪元素和伪类"></a>一：伪元素和伪类</h3><p>通俗点说，伪元素就是一个虚假的元素，同样伪类就是一个虚假的类。伪元素等同于在html结构结构中写一个元素，伪类等同于给一个元素添加一个类。<br>伪元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">p::first-letter&#123;</div><div class="line">  color:red</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;p&gt;hello world!&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>效果就是hello的第一个字母‘h’变红：<br><img src="/2018/03/27/用伪类-after和content实现不确定尺寸图片的垂直水平居中/1.png" alt="伪类"><br>等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.first-letter&#123;</div><div class="line">  color:red</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;p&gt;&lt;span class=&quot;first-letter&quot;&gt;h&lt;/span&gt;ello world!&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>伪类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">ul li:first-child&#123;</div><div class="line">  color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;ul&gt;</div><div class="line"> &lt;li&gt;hello&lt;/li&gt;</div><div class="line"> &lt;li&gt;world!&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>效果就是hello变红了:<br><img src="/2018/03/27/用伪类-after和content实现不确定尺寸图片的垂直水平居中/2.png" alt="伪类"><br>等同于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.first-child&#123;</div><div class="line">  color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;ul&gt;</div><div class="line"> &lt;li class=&quot;first-child&quot;&gt;hello&lt;/li&gt;</div><div class="line"> &lt;li&gt;world!&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>伪元素用“：：”，伪类用“：”，有时候考虑下兼容性问题伪元素也会使用“：”。</p>
<h3 id="二-用：after伪类进行图片居中"><a href="#二-用：after伪类进行图片居中" class="headerlink" title="二.用：after伪类进行图片居中"></a>二.用：after伪类进行图片居中</h3><p>直接上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.img_outer&#123;</div><div class="line">  width:400px;</div><div class="line">  height:300px;</div><div class="line">  background-color:slateblue;</div><div class="line">  text-align:center; /*水平居中*/</div><div class="line">&#125;</div><div class="line">.img_inner&#123;</div><div class="line">  /*没有规定图片尺寸，尺寸任意*/</div><div class="line">  vertical-align:middle;</div><div class="line">&#125;</div><div class="line">.img_outer::after&#123;</div><div class="line">  display:inline-block;</div><div class="line">  width:0;</div><div class="line">  height:100%;</div><div class="line">  content:&apos;center&apos;;/*此处的cotent一定要有，即使content：‘’也不能把content拿掉*/</div><div class="line">  vertical-align:middle;</div><div class="line">  overflow:hidde;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;div class=&quot;img_outer&quot;&gt;</div><div class="line">  &lt;img class=&quot;img_inner&quot; src=&quot;xxxxxxx.jpg&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><img src="/2018/03/27/用伪类-after和content实现不确定尺寸图片的垂直水平居中/3.png" alt="伪类"></p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flex布局语法全记录]]></title>
      <url>/2018/02/24/flex%E5%B8%83%E5%B1%80%E8%AF%AD%E6%B3%95%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h5 id="简单来说，使用flex布局的就是为了解决传统布局中对于一些特殊的布局的实现起来的不方便，说一个最常见的例子就是垂直居中。felx布局也称为弹性布局，目前个大传统浏览器和移动端浏览器的支持程度都还不错，可以放心大胆的使用了，亲测发现，熟练了以后用起来很爽！"><a href="#简单来说，使用flex布局的就是为了解决传统布局中对于一些特殊的布局的实现起来的不方便，说一个最常见的例子就是垂直居中。felx布局也称为弹性布局，目前个大传统浏览器和移动端浏览器的支持程度都还不错，可以放心大胆的使用了，亲测发现，熟练了以后用起来很爽！" class="headerlink" title="简单来说，使用flex布局的就是为了解决传统布局中对于一些特殊的布局的实现起来的不方便，说一个最常见的例子就是垂直居中。felx布局也称为弹性布局，目前个大传统浏览器和移动端浏览器的支持程度都还不错，可以放心大胆的使用了，亲测发现，熟练了以后用起来很爽！"></a>简单来说，使用flex布局的就是为了解决传统布局中对于一些特殊的布局的实现起来的不方便，说一个最常见的例子就是垂直居中。felx布局也称为弹性布局，目前个大传统浏览器和移动端浏览器的支持程度都还不错，可以放心大胆的使用了，亲测发现，熟练了以后用起来很爽！</h5><h4 id="说在前面的话：flex布局也可以称为弹性布局，任何一个容器都可以作为flex容器，但是需要注意的是：使用了felx后，子元素的float、clear、vertical-align都将失效。"><a href="#说在前面的话：flex布局也可以称为弹性布局，任何一个容器都可以作为flex容器，但是需要注意的是：使用了felx后，子元素的float、clear、vertical-align都将失效。" class="headerlink" title="说在前面的话：flex布局也可以称为弹性布局，任何一个容器都可以作为flex容器，但是需要注意的是：使用了felx后，子元素的float、clear、vertical-align都将失效。"></a>说在前面的话：flex布局也可以称为弹性布局，任何一个容器都可以作为flex容器，但是需要注意的是：使用了felx后，子元素的float、clear、vertical-align都将失效。</h4><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>采用了flex布局的元素称为“flex容器”，他的子元素也就成了容器成员，称为“flex项目”。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*flex布局的父元素*/</div><div class="line">.box&#123;  </div><div class="line">  display:flex</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*使用了flex布局的父元素，表现为行内元素*/</div><div class="line">.box&#123;  </div><div class="line">  display:inline-flex</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*webkit内核的浏览器要加webkit前缀*/</div><div class="line">.box&#123;  </div><div class="line">  display:-webkit-flex；</div><div class="line">  display:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>容器默认存在两根轴，水平的称为“主轴”，垂直的称为“交叉轴”。<br>主轴的开始位置称为“main start”，结束位置称为“main end”。交叉轴的开始位置称为“cross start”，结束位置称为“cross end”。项目（容器成员）默认沿着主轴排列，当然修改属性可以修改成员的排列方式。  </p>
<h3 id="2-容器的属性"><a href="#2-容器的属性" class="headerlink" title="2.容器的属性"></a>2.容器的属性</h3><p>容器的属性分为六个：<br>(1)flex-direction<br>(2)flex-wrap<br>(3)flex-flow<br>(4)justify-content<br>(5)align-items<br>(6)align-content。  </p>
<p>下面将分别介绍每一条属性：  </p>
<h4 id="2-1-flex-direction"><a href="#2-1-flex-direction" class="headerlink" title="2.1 flex-direction"></a>2.1 flex-direction</h4><p>flex-direction属性决定主轴的方向,也就是项目的排列方向。属性有四个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex-direction:row | row-reverse | column | column-revers;</div></pre></td></tr></table></figure></p>
<p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。  </p>
<p>toto:图片</p>
<h4 id="2-2-flex-wrap"><a href="#2-2-flex-wrap" class="headerlink" title="2.2 flex-wrap"></a>2.2 flex-wrap</h4><p>flex-wrap表示如果一行排列不下所有的子元素，规定应该如何换行，属性有个三个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex-wrap: nowrap | wrap | wrap-reverse;</div></pre></td></tr></table></figure></p>
<p>nowrap（默认）：不换行。<br>wrap：换行，第一行在上方，也就是从上到下挨着排。<br>wrap-reverse：换行，第一行在下方，可以理解成从下到上挨着排。  </p>
<p>todo：图片</p>
<h4 id="2-3-flex-flow"><a href="#2-3-flex-flow" class="headerlink" title="2.3 flex-flow"></a>2.3 flex-flow</h4><p>flex-flow是flex-direction属性和flex-wrap属性的简写形式，即把两条属性合为一条来写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex-flow: flex-direction || flex-wrap；</div></pre></td></tr></table></figure></p>
<p>默认值为：flex-flow：row nowrap；</p>
<h4 id="2-4-justify-content"><a href="#2-4-justify-content" class="headerlink" title="2.4 justify-content"></a>2.4 justify-content</h4><p>justify-content属性定义了项目在主上的对齐方式，值有五个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">justify-content: flex-start | flex-end | center | space-between | space-around;</div></pre></td></tr></table></figure></p>
<p><span style="color:red">需要注意的一点是这些对齐方式是跟随着轴的方向走的。</span>下面是以主轴从左到右方向：<br>flex-start（默认值）：左对齐。<br>flex-end：右对齐。<br>center： 居中。<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br><br>tudo：图片  </p>
<h4 id="2-5-align-items"><a href="#2-5-align-items" class="headerlink" title="2.5 align-items"></a>2.5 align-items</h4><p>align-items属性定义项目在交叉轴上如何对齐，属性有五条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">align-items: flex-start | flex-end | center | baseline | stretch;</div></pre></td></tr></table></figure></p>
<p>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。  </p>
<p>tudo:图片</p>
<h4 id="2-6-align-content"><a href="#2-6-align-content" class="headerlink" title="2.6 align-content"></a>2.6 align-content</h4><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。属性有六个： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div></pre></td></tr></table></figure>
<p>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。  </p>
<h3 id="3-项目属性"><a href="#3-项目属性" class="headerlink" title="3.项目属性"></a>3.项目属性</h3><p>项目属性分为六个：<br>(1)order<br>(2)flex-grow<br>(3)flex-shrink<br>(4)flex-basis<br>(5)flex<br>(6)align-self  </p>
<h4 id="3-1-oroder"><a href="#3-1-oroder" class="headerlink" title="3.1 oroder"></a>3.1 oroder</h4><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">order:-2|-1|0|1|2|3|.....</div></pre></td></tr></table></figure>
<p>tudo:图片</p>
<h4 id="3-2-flex-grow"><a href="#3-2-flex-grow" class="headerlink" title="3.2 flex-grow"></a>3.2 flex-grow</h4><p>flex-grow属性定义项目的放大比例，比如：一个项目的flex-grow是2，其他的是1，则是2的这个项目占据的空间是为1的项目的一倍。默认为0，即如果存在剩余空间，也不放大。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">flex-grow: 0|1|2|3....;</div><div class="line"></div><div class="line">````  </div><div class="line"></div><div class="line">tudo:图片</div><div class="line"></div><div class="line">#### 3.3 flex-shrink  </div><div class="line">flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</div></pre></td></tr></table></figure></p>
<p>flex-shrink: 0|1|2|3….; //不能为负值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 3.4 flex-basis</div><div class="line">flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</div></pre></td></tr></table></figure></p>
<p>.item {<br>  flex-basis: <length> | auto; //默认值为auto<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</div><div class="line"></div><div class="line">#### 3.5 flex</div><div class="line">flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</div></pre></td></tr></table></figure></length></p>
<p>.item {<br>  flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 3.6 align-self</div><div class="line">align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</div></pre></td></tr></table></figure></p>
<p>.item {<br>  align-self: auto | flex-start | flex-end | center | baseline | stretch;<br>}<br>````</p>
<p>tudo:图片</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记录一次webpack+vue的配置]]></title>
      <url>/2018/02/17/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1webpack%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="webpack手动配置-vue项目构建"><a href="#webpack手动配置-vue项目构建" class="headerlink" title="webpack手动配置+vue项目构建"></a>webpack手动配置+vue项目构建</h3><h4 id="注意本文不涉及vue的具体使用方法，只用于记录vue项目的配置以及打包流程，用于理解vue的单文件系统的构建流程。以下将按照实际的配置步骤顺序进行记录。"><a href="#注意本文不涉及vue的具体使用方法，只用于记录vue项目的配置以及打包流程，用于理解vue的单文件系统的构建流程。以下将按照实际的配置步骤顺序进行记录。" class="headerlink" title="注意本文不涉及vue的具体使用方法，只用于记录vue项目的配置以及打包流程，用于理解vue的单文件系统的构建流程。以下将按照实际的配置步骤顺序进行记录。"></a>注意本文不涉及vue的具体使用方法，只用于记录vue项目的配置以及打包流程，用于理解vue的单文件系统的构建流程。以下将按照实际的配置步骤顺序进行记录。</h4><h4 id="1-npm初始化项目："><a href="#1-npm初始化项目：" class="headerlink" title="1.npm初始化项目："></a>1.npm初始化项目：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>此命令会自动创建package.json文件，且是未配置过的原始文件。</p>
<h4 id="2-安装wepack，vue，vue-loader"><a href="#2-安装wepack，vue，vue-loader" class="headerlink" title="2.安装wepack，vue，vue-loader"></a>2.安装wepack，vue，vue-loader</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i webpack vue vue-loader</div></pre></td></tr></table></figure>
<p>安装结束后会出现warn，提示缺少css-loader和vue-template-compiler，所以接下来安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i css-loader vue-template-compiler</div></pre></td></tr></table></figure></p>
<h4 id="3-建立存放源码文件夹"><a href="#3-建立存放源码文件夹" class="headerlink" title="3.建立存放源码文件夹"></a>3.建立存放源码文件夹</h4><p>建立src文件夹，用于放置源码，并在src中创建app.vue文件，“.vue”文件可以理解为vue的一个单文件组件，里面可以包含template(html),script,style,并且.vue文件之间可以相互独立，也可以作为组件被import使用。</p>
<h4 id="4-创建自定义的webpack的配置文件"><a href="#4-创建自定义的webpack的配置文件" class="headerlink" title="4.创建自定义的webpack的配置文件"></a>4.创建自定义的webpack的配置文件</h4><p>创建webpack.config.js，作为我们自己定义的webpack配置文件，来帮助我们来把前端资源进行打包，比如js，css，或者图片字体等等，在后面构建的时候会使用到。</p>
<h4 id="5-创建index-js"><a href="#5-创建index-js" class="headerlink" title="5.创建index.js"></a>5.创建index.js</h4><p>在src下创建index.js作为项目的入口文件，该文件用于承载app.vue，既在dom中创建挂载app.vue的dom节点。</p>
<h4 id="6-在package-json中创建打包脚本"><a href="#6-在package-json中创建打包脚本" class="headerlink" title="6.在package.json中创建打包脚本"></a>6.在package.json中创建打包脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;build&quot;:&quot;webpack --config webpack.config.js&quot;</div></pre></td></tr></table></figure>
<p>表示build时webpack的配置文件使用webpack.config.js。<br><span style="color:red">此时运行npm run build，会在目录下成功创建dist目录，但是会报错，因为此刻我们没有为.vue文件配置相应的loader，可以理解为此时的webpack还无法解析vue文件,所以接下来在webpack.config.js中继续进行如下配置：</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module:&#123;</div><div class="line">    rules:[</div><div class="line">      &#123;</div><div class="line">        test:/\.vue$/,</div><div class="line">        loader:&apos;vue-loader&apos;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>可以发现rules为一个数组，在rules中配置的是所有的loader，后面还会有css-loader等等。<br>这时再运行npm run build，就会正常打包出dist文件夹，并在其中有一个bundle.js文件,打开bundle.js文件，发现bundle.js是由vue的源码和我们自己写的index.js共同组成，可以理解为webpack把vue源码和我们自己的js打包成了一个文件，在后面会把vue相关的代码单独提出来进行打包，毕竟我们自己的代码迭代的速度很快，vue源码会稳定很多，如果不单独提出来每次打包都会包括vue源码很不合算。</p>
<h4 id="7-配置加载静态资源"><a href="#7-配置加载静态资源" class="headerlink" title="7.配置加载静态资源"></a>7.配置加载静态资源</h4><h5 id="1-css相关loader"><a href="#1-css相关loader" class="headerlink" title="(1)css相关loader"></a>(1)css相关loader</h5><p>在rules中接着写，由于此处会加载多个loader，所以使用use：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test:/\.css$/,</div><div class="line">  use:[</div><div class="line">        &apos;style-loader&apos;,//把css写进html</div><div class="line">        &apos;css-loader&apos;,//从css文件中读出css内容</div><div class="line">        ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本条配置的作用是，css会在html中以一段js的形式出现，该js的做用的是把css写入进html。</p>
<h5 id="2-图片相关loader"><a href="#2-图片相关loader" class="headerlink" title="(2)图片相关loader"></a>(2)图片相关loader</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test:/\.(gif|jpg|jpeg|png|svg)$/,</div><div class="line">  use:[</div><div class="line">        &#123;</div><div class="line">          loader:&apos;url-loader&apos;,</div><div class="line">          options:&#123; //把参数传至loader</div><div class="line">            limit:1024,</div><div class="line">              name:&apos;[name].[ext]&apos;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处使用对象形式来写因为loader可以配置相关的选项。<br>limit：因为url-loader可以把图片转成base64代码直接写在图片中，而不需要单独生成图片文件，此处设置limit是可以转成base64格式的图片的大小，此处是小于1024kb的都会被转成base64格式直接写进代码中。<br>name：输出的图片的文件名,name为输入的图片，ext为图片扩展名，也可以写成[name]-111.[ext],即名字可以随便写。  </p>
<p>配置完成后安装相关的loader：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i style-loader url-loader file-loader</div></pre></td></tr></table></figure></p>
<p>虽然上文没有提及file-loader，但由于url-loader以来于file-loader，固此处一并进行安装。</p>
<h4 id="7-安装css预处理器"><a href="#7-安装css预处理器" class="headerlink" title="7.安装css预处理器"></a>7.安装css预处理器</h4><p>此处以stylus为例：<br>配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test:/\.styl/,</div><div class="line">  use:[</div><div class="line">       &apos;style-loader&apos;,</div><div class="line">       &apos;css-loader&apos;,</div><div class="line">       &apos;stylus-loader&apos;</div><div class="line">        ]</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>安装loader：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i stylus-loader stylus</div></pre></td></tr></table></figure></p>
<p>同上，stylus-loader依赖stylus，所以此处一并安装stylus。<br>其他css预处理器less，sass也都同理。</p>
<h4 id="8-webpack-dev-server配置和使用"><a href="#8-webpack-dev-server配置和使用" class="headerlink" title="8.webpack-dev-server配置和使用"></a>8.webpack-dev-server配置和使用</h4><p>(1)首先进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i webpack-dev-server</div></pre></td></tr></table></figure></p>
<p>(2)在package.json中添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;dev&quot;: &quot;webpack-dev-server --config webpack.config.js&quot;</div></pre></td></tr></table></figure></p>
<p>(3)在webpack.config.js中进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">target:&apos;web&apos; //webapack的编译平台为web</div></pre></td></tr></table></figure></p>
<p>(4)配置环境变量用以判断是测试环境还是生产环境，首先安装依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i cross-env</div></pre></td></tr></table></figure></p>
<p>(5)这个依赖包的作用是在配置环境变量时同一套配置在mac平台和windows平台下都能适用。</p>
<p>(6)安装好后在package.json修改build和dev的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.js&quot;,</div><div class="line">&quot;dev&quot;: &quot;ross-env NODE_ENV=development webpack-dev-server --config webpack.config.js&quot;</div></pre></td></tr></table></figure></p>
<p>(7)在webpack.config.js中添加生产和测试环境的判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const isDev=process.env.NODE_ENV===&apos;development&apos; //判断是生产环境还是测试环境，若是乎测试环境，isDev=true。</div></pre></td></tr></table></figure></p>
<p>我们在package.json中配置的NODE_ENV=production或NODE_ENV=development都是存在于process变量中，所以才可以像上面那样判断。</p>
<p>(8)在webpack.config.js中继续配置：  </p>
<p>先把之前module.exports中的内容用一个常量config包裹,在代码结尾处再进行module.exports：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const config=&#123;</div><div class="line">target:&apos;web&apos;,</div><div class="line">  entry:path.join(__dirname,&apos;src/index.js&apos;),</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports=config</div></pre></td></tr></table></figure></p>
<p>(9)在module.exports之前添加对环境的判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if(isDev)&#123;</div><div class="line">  config.devServer=&#123;</div><div class="line">    port:8000, //服务的端口</div><div class="line">    host:&apos;0.0.0.0&apos;, //如此配置可以满足localhsot或者127.0.0.1或者内网ip同时可以访问</div><div class="line">    overlay:&#123;</div><div class="line">      errors:true //webapck编译过程中的错误都直接显示在页面上</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(10)添加承载index.js的html，别忘了所有的js都要承载在html中才能跑的起来：<br>安装依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i html-webpack-plugin</div></pre></td></tr></table></figure></p>
<p>在webpack.config.js头部引入该插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const HTMLPlugin=require(&apos;html-webpack-plugin&apos;)</div></pre></td></tr></table></figure></p>
<p>在webpack.config.js头部引入webpack：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const webpack=require(&apos;webpack&apos;)</div></pre></td></tr></table></figure></p>
<p>在config中添加plugins：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">plugins:[</div><div class="line">    new webpack.DefinePlugin(&#123;  //用于判断环境，并且在自己写的js中可以直接调用process.env这个变量</div><div class="line">      &apos;process.env&apos;:&#123;</div><div class="line">        NODE_ENV:isDev?&apos;&quot;development&quot;&apos;:&apos;&quot;production&quot;&apos; //此处注意单引号中要包含双引号，因为“development“和”production“是字符串儿不是变量</div><div class="line">      &#125;</div><div class="line">    &#125;),</div><div class="line">    new HTMLPlugin()</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>现在运行 ‘npm run dev’，就可以运行项目了，浏览器访问<a href="http://localhost:8000/即可。至此，webpack-dev-server已经基本配置完成，终于可以跑个项目了～" target="_blank" rel="external">http://localhost:8000/即可。至此，webpack-dev-server已经基本配置完成，终于可以跑个项目了～</a></p>
<p>最后还要添加几条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hot:true</div></pre></td></tr></table></figure></p>
<p>这条配置用于当页面有数据更新时不需要刷新整个页面，只刷新数据部分即可，就理解成热加载吧。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config.plugins.push(</div><div class="line">    new webpack.HotModuleReplacementPlugin(),</div><div class="line">    new webpack.NoEmitOnErrorsPlugin()</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>这两条把热加载的插件添加进config中。</p>
<p>配置下sourcemap，方便我们在浏览器中进行调试，不用直接面对编译过的代码了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config.devtool=&apos;#cheap-module-eval-source-map&apos; //注意‘devtool’是全小写</div></pre></td></tr></table></figure></p>
<h4 id="9-配置postcss"><a href="#9-配置postcss" class="headerlink" title="9.配置postcss"></a>9.配置postcss</h4><p>postcss可以帮助我们后处理一些css文件，比如说postcss的autoprefixer就可以帮我们添加浏览器前缀(-webkit-…):  </p>
<p>先进行依赖包的安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i postcss-loader autoprefixer babel-loader babel-core</div></pre></td></tr></table></figure></p>
<p>在根目录下创建postcss.config.js,并配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const autoprefixer=require(&apos;autoprefixer&apos;) //自动添加浏览器前缀</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">  plugins:[</div><div class="line">    autoprefixer()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在webpack.config.js中对styl增加一个loader,增加完配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   test: /\.styl/,</div><div class="line">   use: [</div><div class="line">         &apos;style-loader&apos;,</div><div class="line">         &apos;css-loader&apos;,</div><div class="line">         &#123;</div><div class="line">           loader:&apos;postcss-loader&apos;,</div><div class="line">           options:&#123;</div><div class="line">             sourceMap:true //使用下方的stylus-loader生成的sourceMap</div><div class="line">           &#125;</div><div class="line">         &#125;,</div><div class="line">         &apos;stylus-loader&apos;</div><div class="line">       ]</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="10-配置-babelrc"><a href="#10-配置-babelrc" class="headerlink" title="10.配置.babelrc"></a>10.配置.babelrc</h4><p>babelrc用于写vue的render方法，同时使vue支持jsx写法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [</div><div class="line">    &quot;env&quot;</div><div class="line">  ],</div><div class="line">  &quot;plugins&quot;:[</div><div class="line">    &quot;transform-vue-jsx&quot;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>类库安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i babel-preset-env babel-plugin-transform-vue-jsx</div></pre></td></tr></table></figure></p>
<p>提示warn需要babel-helper-vue-jsx-merge-props，继续安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i babel-helper-vue-jsx-merge-props babel-plugin-syntax-jsx</div></pre></td></tr></table></figure></p>
<h4 id="11-webpack配置css的单独分离打包"><a href="#11-webpack配置css的单独分离打包" class="headerlink" title="11.webpack配置css的单独分离打包"></a>11.webpack配置css的单独分离打包</h4><p>此时进行生产环境的打包时(npm run build),css仍然是写在bundle.js中，我们线上实际需要的是css与js等文件分离出来单独打包。具体如下：</p>
<p>首先安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i extract-text-webpack-plugin</div></pre></td></tr></table></figure></p>
<p>安装完成后在webpack.config.js头部进行extract-text-webpack-plugin的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const ExtractPlugin=require(&apos;extract-text-webpack-plugin&apos;)</div></pre></td></tr></table></figure></p>
<p>该插件的作用是把非js代码的文件打包成单独的文件。<br>安装完插件后需要修改webpack.config.js的配置，css预处理相关的配置需要单独写在测试环境的配置下，此处以stylus为例进行配置,less\sass同理，所以之前写好的styl的配置需移动到isDev之下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">if (isDev) &#123;</div><div class="line">  config.module.rules.push(</div><div class="line">    &#123;</div><div class="line">      test: /\.styl/,</div><div class="line">      use: [</div><div class="line">        &apos;style-loader&apos;,</div><div class="line">        &apos;css-loader&apos;,</div><div class="line">        &#123;</div><div class="line">          loader:&apos;postcss-loader&apos;,</div><div class="line">          options:&#123;</div><div class="line">            sourceMap:true //使用下方的stylus-loader生成的sourceMap</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        &apos;stylus-loader&apos;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  )</div><div class="line">  config.devtool=&apos;#cheap-module-eval-source-map&apos;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后生产环境的配置写在else中，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">config.module.rules.push(</div><div class="line">    &#123;</div><div class="line">      test: /\.styl/,</div><div class="line">      use: ExtractPlugin.extract(&#123;</div><div class="line">        fallback:&quot;style-loader&quot;, //style-loader是把css-loader处理出来的内容外面包了一层js，这个js的作用就是把这个css写进html里面去</div><div class="line">        use:[</div><div class="line">          &apos;css-loader&apos;,</div><div class="line">          &#123;</div><div class="line">            loader:&apos;postcss-loader&apos;,</div><div class="line">            options:&#123;</div><div class="line">              sourceMap:true</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &apos;stylus-loader&apos;</div><div class="line">        ]</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  )</div><div class="line"></div><div class="line">  config.plugins.push(</div><div class="line">    new ExtractPlugin(&apos;style.[contentHash:8].css&apos;) //指定输出的静态文件的名字,contentHash会根据css的内容进行hash得到一个单独的值</div><div class="line">  )</div></pre></td></tr></table></figure>
<p>打包出来的filename在生产环境下要用chunkhash，测试环境下可以默认使用hash即可，所以生产环境下要单独配置一下filename：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">else&#123;</div><div class="line">config.output.filename=&apos;[name].[chunkhash:8].js&apos;</div><div class="line">config.module.rules.push(</div><div class="line">  ...</div><div class="line">)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时再进行npm run build，则在dist就会产生带有hash的打包出的文件，且css也是一个被单独打包出来的文件，然而此处要注意，写在vue文件中的样式没有被打包出来，原因是这个vue-loader的一个设定，它会在组件要显示的时候才会把相关样式显示出来，即只有在该vue被使用时相关的样式才会被使用，这样做的好处是组件异步加载时样式也会异步加载。</p>
<h4 id="12-vue类库代码和业务代码的拆分"><a href="#12-vue类库代码和业务代码的拆分" class="headerlink" title="12.vue类库代码和业务代码的拆分"></a>12.vue类库代码和业务代码的拆分</h4><p>之所以要进行vue代码和业务代码拆分是因为类库的代码稳定性要相对较高，而业务的代码则会快速的迭代，如果不拆分每次稳定的类库代码和业务代码都会被一起打包出来，类库代码也没法做到在浏览器中长久的缓存，这样不仅会使用户的加载速度变慢同时也会耗费没有必要的服务器流量。  </p>
<p>具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">else&#123;</div><div class="line">  config.entry=&#123;</div><div class="line">    app:path.join(__dirname, &apos;src/index.js&apos;),</div><div class="line">    vendor:[&apos;vue&apos;] //此处因为现在只使用了vue，如果日后使用了vue-router也可以在后面接着写vue-router</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在生产环境的plugin中增加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">  name:&apos;vendor&apos; //这里的名字要和上面else中vendor名字一致，否则识别不了</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这时再进行npm run build，就会打包出来vendor.xxxx.js文件，里面包含的就是vue的类库代码，然后app.js的大小也会相应的变小。</p>
<h4 id="13-把webpack相关的代码单独打包到一个单独的文件中"><a href="#13-把webpack相关的代码单独打包到一个单独的文件中" class="headerlink" title="13.把webpack相关的代码单独打包到一个单独的文件中"></a>13.把webpack相关的代码单独打包到一个单独的文件中</h4><p>在config.plugins.push中添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">config.plugins.push(</div><div class="line">  ...</div><div class="line">  new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    name:&apos;vendor&apos; //这里的名字要和上面else中vendor名字一致，否则识别不了</div><div class="line">  &#125;),</div><div class="line">    //这里注意：vendor一定要放在runtime的前面</div><div class="line">  new webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    name:&apos;runtime&apos; //把写在js中的webpack的代码打包到单独的文件中</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>现在再运行npm run build就会把webpack的代码打包到runtime.xxx.js中，webpack代码分离完毕。</p>
<h4 id="至此，一次基本的webpack-vue的配置已经完成了。如果不想使用vue-cli大礼包，webpack基本的一些配置好是要了解一些的。"><a href="#至此，一次基本的webpack-vue的配置已经完成了。如果不想使用vue-cli大礼包，webpack基本的一些配置好是要了解一些的。" class="headerlink" title="至此，一次基本的webpack+vue的配置已经完成了。如果不想使用vue-cli大礼包，webpack基本的一些配置好是要了解一些的。"></a>至此，一次基本的webpack+vue的配置已经完成了。如果不想使用vue-cli大礼包，webpack基本的一些配置好是要了解一些的。</h4><h4 id="最后，生产环境下上传文件只需把dist文件夹下的内容上传至服务器即可。"><a href="#最后，生产环境下上传文件只需把dist文件夹下的内容上传至服务器即可。" class="headerlink" title="最后，生产环境下上传文件只需把dist文件夹下的内容上传至服务器即可。"></a>最后，生产环境下上传文件只需把dist文件夹下的内容上传至服务器即可。</h4>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信中自动播放音乐]]></title>
      <url>/2018/02/08/%E5%BE%AE%E4%BF%A1%E4%B8%AD%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90/</url>
      <content type="html"><![CDATA[<h3 id="微信中自动播放音乐"><a href="#微信中自动播放音乐" class="headerlink" title="微信中自动播放音乐"></a>微信中自动播放音乐</h3><h4 id="1-先说一下浏览中-微信-非微信-如何手动控制音乐的播放和暂停："><a href="#1-先说一下浏览中-微信-非微信-如何手动控制音乐的播放和暂停：" class="headerlink" title="1.先说一下浏览中(微信/非微信)如何手动控制音乐的播放和暂停："></a>1.先说一下浏览中(微信/非微信)如何手动控制音乐的播放和暂停：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;audio id=&quot;music&quot; src=&quot;xxxxx&quot;&gt;&lt;/audio&gt;</div><div class="line">&lt;button id=&quot;btn&quot;&gt;播放/暂停&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">function playMusic()&#123;</div><div class="line">  var music=documnt.getElementById(&quot;music&quot;);</div><div class="line">  if(music.paused)&#123;</div><div class="line">      music.play();</div><div class="line">  &#125;else&#123;</div><div class="line">      music.pause();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var button=document.getElementById(&quot;btn&quot;);</div><div class="line">button.onclick=playMusic()；</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>原理其实就是调用js的play()和pause()方法，当audio标签的paused属性为true时则代表音乐在停止状态，此时调用play()方法播放音乐，反之则为暂停播放。</p>
<h4 id="2-由于微信中屏蔽了音乐、视频的自动播放，所以想要自动播放只能在页面加载完成的时候自动触发一个播放的事件，需要注意一点，事件要放在微信的wx-ready-中代码如下："><a href="#2-由于微信中屏蔽了音乐、视频的自动播放，所以想要自动播放只能在页面加载完成的时候自动触发一个播放的事件，需要注意一点，事件要放在微信的wx-ready-中代码如下：" class="headerlink" title="2.由于微信中屏蔽了音乐、视频的自动播放，所以想要自动播放只能在页面加载完成的时候自动触发一个播放的事件，需要注意一点，事件要放在微信的wx.ready()中代码如下："></a>2.由于微信中屏蔽了音乐、视频的自动播放，所以想要自动播放只能在页面加载完成的时候自动触发一个播放的事件，需要注意一点，事件要放在微信的wx.ready()中代码如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">（记得先引入微信的js文件，比如：http://res.wx.qq.com/open/js/jweixin-1.2.0.js）</div><div class="line"></div><div class="line">&lt;!--注意此处的audio表中没有src--&gt;</div><div class="line">&lt;audio id=&quot;music&quot;&gt;&lt;/audio&gt; </div><div class="line"></div><div class="line">wx.ready(function()&#123;</div><div class="line">    var music=document.getElementById(&quot;music&quot;);</div><div class="line">    if(!music.src)&#123;</div><div class="line">        music.src=&apos;音乐文件地址&apos;；</div><div class="line">    &#125;；</div><div class="line">    music.play();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>最后还是要强调一下，微信中播放与浏览器的一个不同是事件的触发要放在微信的wx.ready中，代表在微信中页面加载完成时开始调用事件，关于wx的详情请移步至微信jssdk文档：<br>（<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115）" target="_blank" rel="external">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115）</a><br>官方文档写的很详细，此处不在赘述。</p>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tips]]></title>
      <url>/2018/01/25/tips/</url>
      <content type="html"><![CDATA[<p>本篇只用于记录日常开发中经常用到一些小的又不容易记住的点，会有点杂，且不做具体的展开解释，仅仅为了方便日后查询，将会持续更新。</p>
<h4 id="1-input去掉点击时候出现边框："><a href="#1-input去掉点击时候出现边框：" class="headerlink" title="1.input去掉点击时候出现边框："></a>1.input去掉点击时候出现边框：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">outline:none</div></pre></td></tr></table></figure>
<h4 id="2-文字超过一定宽度时显示“…”"><a href="#2-文字超过一定宽度时显示“…”" class="headerlink" title="2.文字超过一定宽度时显示“…”:"></a>2.文字超过一定宽度时显示“…”:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">width:xxx;/*一定要设定宽度*/</div><div class="line">overflow:hidden;</div><div class="line">text-overflow:ellipsis;</div><div class="line">word-break:break-all;/*用于不换行*/</div><div class="line">white-space:nowrap;/*用于不换行*/</div><div class="line">display:inline-block;/*也可以是block，根据具体情况*/</div></pre></td></tr></table></figure>
<h4 id="3-textarea的右下角不出现可调节标记："><a href="#3-textarea的右下角不出现可调节标记：" class="headerlink" title="3.textarea的右下角不出现可调节标记："></a>3.textarea的右下角不出现可调节标记：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resize:none;</div></pre></td></tr></table></figure>
<h4 id="4-JS绑定键盘事件"><a href="#4-JS绑定键盘事件" class="headerlink" title="4.JS绑定键盘事件"></a>4.JS绑定键盘事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;body&quot;).keydown(function()&#123;</div><div class="line">    //以下为掩饰回车键，其他按键改变keycode即可</div><div class="line">    if(event.keyCode==13)&#123; </div><div class="line">        //dosomething</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="5-限制textarea中字数的方法："><a href="#5-限制textarea中字数的方法：" class="headerlink" title="5.限制textarea中字数的方法："></a>5.限制textarea中字数的方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;textarea maxlength=&quot;32&quot; onchange=&quot;this.value=this.value.substring(0,32)&quot; onkeydown=&quot;this.value=this.value.substring(0,32)&quot; onkeyup=&quot;this.value.substring(0,32)&quot;&gt;</div><div class="line">//onchange,onkeydown,onkeyup三者缺一不可</div></pre></td></tr></table></figure>
<h4 id="6-css做一个左右震动的动画（类似于当年科比退役时腾讯的h5）："><a href="#6-css做一个左右震动的动画（类似于当年科比退役时腾讯的h5）：" class="headerlink" title="6.css做一个左右震动的动画（类似于当年科比退役时腾讯的h5）："></a>6.css做一个左右震动的动画（类似于当年科比退役时腾讯的h5）：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.图片素材分左右相等的两部分，左边是无振动的图片，右边是震动时的图片；</div><div class="line">2.使用background-image引入图片；</div><div class="line">3.animation属性： </div><div class="line">  ainmation:shack 0.8s steps(2) infinite; /*关键点在于此处的step*/</div><div class="line">  @keyframes shack&#123;/*注意浏览器的兼容性，此处仅用于示例，省略兼容*/</div><div class="line">      100%&#123;</div><div class="line">          background-position:200%;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="7-去掉a标签在移动端点击时产生的蓝色背景："><a href="#7-去掉a标签在移动端点击时产生的蓝色背景：" class="headerlink" title="7.去掉a标签在移动端点击时产生的蓝色背景："></a>7.去掉a标签在移动端点击时产生的蓝色背景：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-tap-highlight-color: rgba(255, 255, 255, 0);</div><div class="line">-webkit-user-select: none;</div><div class="line">-moz-user-select: none;</div></pre></td></tr></table></figure>
<h4 id="8-一条属性写多个动画效果"><a href="#8-一条属性写多个动画效果" class="headerlink" title="8.一条属性写多个动画效果"></a>8.一条属性写多个动画效果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.class&#123;</div><div class="line">    animation:animation-name animation-duration animation-delay animation-timing-function animation-iteration-count,animation-name animation-duration animation-delay animation-timing-function animation-iteration-count; </div><div class="line">&#125;</div><div class="line">/*</div><div class="line"> animation-name2:动画名称，</div><div class="line"> animation-duration:动画持续时间，</div><div class="line"> animation-delay:动画触发延迟时间，</div><div class="line"> animation-timing-function:动画的速度曲线</div><div class="line"> animation-iteration-count:动画播放的次数</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="9-jquey的delay-方法，如果后面要跟hide-或show-show-或hide-必须要加参数："><a href="#9-jquey的delay-方法，如果后面要跟hide-或show-show-或hide-必须要加参数：" class="headerlink" title="9.　jquey的delay()方法，如果后面要跟hide()或show(),show()或hide()必须要加参数："></a>9.　jquey的delay()方法，如果后面要跟hide()或show(),show()或hide()必须要加参数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//实践发现参数似乎是可以是任何数字</div><div class="line">$(element).delay().show(1);</div><div class="line">$(element).delay().hide(1);</div></pre></td></tr></table></figure>
<h4 id="10-检查元素是否含有某个class，jquery下用hasClass-js下用indexOf"><a href="#10-检查元素是否含有某个class，jquery下用hasClass-js下用indexOf" class="headerlink" title="10.检查元素是否含有某个class，jquery下用hasClass(),js下用indexOf:"></a>10.检查元素是否含有某个class，jquery下用hasClass(),js下用indexOf:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.hasClass(&quot;elementClass&quot;);</div></pre></td></tr></table></figure>
<h4 id="11-display和visibility的区别："><a href="#11-display和visibility的区别：" class="headerlink" title="11.display和visibility的区别："></a>11.display和visibility的区别：</h4><p>visibility=visible =&gt;显示，<br>visibility=hidden =&gt;隐藏</p>
<p>visibility表示元素<span style="color:red">可见与否</span>，元素的位置还在；<br>display则表示元素<span style="color:red">是否存在</span>，如果为hidden则该元素的位置也一并隐藏。</p>
<h4 id="12-element-html-element-text-element-val-的区别："><a href="#12-element-html-element-text-element-val-的区别：" class="headerlink" title="12.$(element).html(),$(element).text(),$(element).val()的区别："></a>12.$(element).html(),$(element).text(),$(element).val()的区别：</h4><p>.html()获取的是改div所包裹的html标签以及标签内的文本内容；<br>.text()获取的是该div所包裹的去除html标签所剩余的<span style="color:red">文本内容</span>;<br>.val()获取的是文本框一类的具有value属性的元素的value属性值，也可以理解成是文本框内所输入的内容。</p>
<h4 id="13-利用js和h5判断设备是否联网，注意：此方法只会在页面每次加载或刷新时才会被调用："><a href="#13-利用js和h5判断设备是否联网，注意：此方法只会在页面每次加载或刷新时才会被调用：" class="headerlink" title="13.利用js和h5判断设备是否联网，注意：此方法只会在页面每次加载或刷新时才会被调用："></a>13.利用js和h5判断设备是否联网，注意：此方法只会在页面每次加载或刷新时才会被调用：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(navigator.online)&#123;  </div><div class="line">  //在线</div><div class="line">&#125;else&#123;</div><div class="line">  //离线</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="14-获取video视频播放的当前时长和该视频的总时长："><a href="#14-获取video视频播放的当前时长和该视频的总时长：" class="headerlink" title="14.获取video视频播放的当前时长和该视频的总时长："></a>14.获取video视频播放的当前时长和该视频的总时长：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var video=document.getElementById(&quot;video&quot;);  </div><div class="line">video.currentTime;//当前时常  </div><div class="line">video.duration;//总时长</div></pre></td></tr></table></figure>
<p>可以用此做一些播放视频时的进度条的效果，比如点击进度条跳至该时长播放啊一类的。</p>
<h4 id="15-jquery选择同级元素："><a href="#15-jquery选择同级元素：" class="headerlink" title="15.jquery选择同级元素："></a>15.jquery选择同级元素：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(element).next();//选择下一个同级元素  </div><div class="line">$(element).nextAll();//选择该元素所有的同级元素</div></pre></td></tr></table></figure>
<h4 id="16-ios中视频播放时自动全屏的解决方法：页面引入iphon-inline-video-js-使用方法："><a href="#16-ios中视频播放时自动全屏的解决方法：页面引入iphon-inline-video-js-使用方法：" class="headerlink" title="16.ios中视频播放时自动全屏的解决方法：页面引入iphon-inline-video.js,使用方法："></a>16.ios中视频播放时自动全屏的解决方法：页面引入iphon-inline-video.js,使用方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;video src=&quot;file.mp4&quot; playsinline&gt;&lt;/video&gt;</div></pre></td></tr></table></figure>
<h4 id="17-location-search"><a href="#17-location-search" class="headerlink" title="17.location.search:"></a>17.location.search:</h4><p>可读可写，可设置或返回url的”?”后面的部分，使用频率超高。</p>
<h4 id="18-什么时候该清除浮动："><a href="#18-什么时候该清除浮动：" class="headerlink" title="18.什么时候该清除浮动："></a>18.什么时候该清除浮动：</h4><p>当子元素浮动时，由于子元素脱离文档流会导致父元素的高度变为0，此时若想自元素能撑开父元素，则需要给父元素清楚浮动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.fatherClass&#123;</div><div class="line">    clear:both;</div><div class="line">    overflow:hidden</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="19-用absolute和translate实现居中效果"><a href="#19-用absolute和translate实现居中效果" class="headerlink" title="19.用absolute和translate实现居中效果"></a>19.用absolute和translate实现居中效果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;test&quot;&gt;&lt;/div&gt;</div><div class="line">.test&#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    position:absolute;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    transform:translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="20-document-ready-和window-onload的区别"><a href="#20-document-ready-和window-onload的区别" class="headerlink" title="20.$(document).ready()和window.onload的区别"></a>20.$(document).ready()和window.onload的区别</h4><p>$(document).ready()是在dom结构加载完成后就会执行，不必等到资源加载完成；<br>window.onload是在dom文档和页面中的所有资源都加载完成之后才会执行。<br>所以，$(document).ready()的执行时间是在window.onload之前。</p>
<h4 id="21-弹出弹窗时使背景不可滚动"><a href="#21-弹出弹窗时使背景不可滚动" class="headerlink" title="21.弹出弹窗时使背景不可滚动"></a>21.弹出弹窗时使背景不可滚动</h4><p>思路为给body或者html一个class，该class控制overflow:hidden即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.stopScroll &#123;</div><div class="line">    width: 100%;</div><div class="line">    height: 100%;</div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="22-ios中局部滚动不流畅-overflow-y-scroll"><a href="#22-ios中局部滚动不流畅-overflow-y-scroll" class="headerlink" title="22.ios中局部滚动不流畅(overflow-y:scroll)"></a>22.ios中局部滚动不流畅(overflow-y:scroll)</h4><p>给body或局部滚动的dom节点上增加如下属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//android不识别此属性</div><div class="line">body&#123;</div><div class="line">    -webkit-overflow-scrolling:touch;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//局部滚动的dom节点</div><div class="line">.scroll-element&#123;</div><div class="line">    overflow:auto</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="23-去掉ios中input-textarea-用contentditable-true模拟的输入框，在选中时产生的一闪而过的阴影"><a href="#23-去掉ios中input-textarea-用contentditable-true模拟的输入框，在选中时产生的一闪而过的阴影" class="headerlink" title="23.去掉ios中input,textarea,用contentditable=true模拟的输入框，在选中时产生的一闪而过的阴影:"></a>23.去掉ios中input,textarea,用contentditable=true模拟的输入框，在选中时产生的一闪而过的阴影:</h4><p>(尝试过使用-webkit-appearance: none，然而无效。。。。)<br>给响应节点添加如下属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-tap-highlight-color:transparent</div></pre></td></tr></table></figure></p>
<h4 id="24-去除ios中input输入框上方的阴影："><a href="#24-去除ios中input输入框上方的阴影：" class="headerlink" title="24.去除ios中input输入框上方的阴影："></a>24.去除ios中input输入框上方的阴影：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-appearance:none</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 综合，杂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 综合，杂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信分享配置以及相关参数获取方法]]></title>
      <url>/2017/12/25/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近和客户端做了很多需要分享到微信的H5，其中涉及到分享功能的配置，踩了几个坑，特此记录。</p>
<h4 id="先整体说一下思路："><a href="#先整体说一下思路：" class="headerlink" title="先整体说一下思路："></a>先整体说一下思路：</h4><p>微信公众平台中设置JS接口安全域名 ——&gt;H5页面中引入微信js：<a href="http://res.wx.qq.com/open/js/jweixin-1.2.0.js" target="_blank" rel="external">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a>) ——&gt; 从服务器获取timestamp，nonceStr，signature ——&gt; 在wx.ready中调用分享接口。  </p>
<h3 id="要在服务端进行的："><a href="#要在服务端进行的：" class="headerlink" title="要在服务端进行的："></a>要在服务端进行的：</h3><h4 id="一、获取access-token"><a href="#一、获取access-token" class="headerlink" title="一、获取access_token"></a>一、获取access_token</h4><p>获取access_token的目的是用来获取jsapi_ticket，那么什么是jsapi_ticket？用官方的话说，jsapi_ticket是微信公众号用于调用js接口的临时票据，通俗点说就是要想调用微信的js接口，就要先获取jsapi_ticket，<span style="color:red">在获取access_token前要注意一点：一定要先到公众平台设置ip白名单，否则在获取token时会提示：”invalid ip xxx.xxx.xxx.xxx, not in whitelist hint: [yaulkA0408b705]”</span>，设置完白名单后就可以安心的用下面的方法获取token了：  </p>
<p>获取access_token方法如下：通过get方法请求此地址：<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=SECRET" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=SECRET</a><br>解释下参数：grant_type就写死“client_credential”即可，appid为公众号的appi，secret为公众号的secret，这两个都可以在微信公众平台获取。<br>注意：access_token的有效期为2个小时，需要定时进行刷新。<br>正确请求的情况下会返回access_token和expires_in（过期时间）。</p>
<h4 id="二、获取jsapi-ticket"><a href="#二、获取jsapi-ticket" class="headerlink" title="二、获取jsapi_ticket"></a>二、获取jsapi_ticket</h4><p>用第一步拿到的access_token，用get方法请求：<br><a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a><br>成功返回如下：(借用下官方的图)<br><img src="/2017/12/25/微信分享配置以及相关参数获取方法/1.jpg" alt="成功返回信息"><br><span style="color:red">此处注意：jsapi_ticket和token一样有效期都为7200秒，而且每天获取token和jsapi_ticket的次数有限，所以必须要在服务端缓存jsapi_ticket和access_token，每7200秒的时候才获取一次。</span></p>
<h4 id="三、生成签名"><a href="#三、生成签名" class="headerlink" title="三、生成签名"></a>三、生成签名</h4><p>需要参与签名的参数如下：<br>1.noncestr（随机字符串）<br>2.步骤二中获取到的jsapi_ticket<br>3.timestamp（时间戳）<br>4.当前网页的URL，不包括#及其后面部分，可通过location.href.split(‘#’)[0]获取  </p>
<p>对以上所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串string1。这里需要注意的是所有参数名均为小写字符。对string1作sha1加密，字段名和字段值都采用原始值，不进行URL 转义。即signature=sha1(string1)。<br>示例：（再借用一下官方的图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/2.jpg" alt="string1"><br>然后对string1进行sha1签名，即可得到signature。如下（还是借用官方的图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/3.jpg" alt="sha1签名">  </p>
<p><span style="color:red">此处注意了，有一个小坑，签名的URL必须和调用JS接口的url一致，比较保险的方法是前端直接获取页面的url然后传给后端进行签名，这样即使url中有动态的参数也不会出现签名的url和页面的url不一致而导致签名失败的情况。</span>  </p>
<h4 id="好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。"><a href="#好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。" class="headerlink" title="好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。"></a>好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。</h4><h3 id="要在前端页面中进行的："><a href="#要在前端页面中进行的：" class="headerlink" title="要在前端页面中进行的："></a>要在前端页面中进行的：</h3><h4 id="一、在公众平台中设置安全域名"><a href="#一、在公众平台中设置安全域名" class="headerlink" title="一、在公众平台中设置安全域名"></a>一、在公众平台中设置安全域名</h4><p>安全域名的设置要注意一下，只写域名就好，不用写http，记得要把微信提供的txt文件放在域名的根目录下，要保证域名可以访问到这个txt文件，可以在浏览器里输入域名+txt文件的名字来测试txt位置是否放置正确。<br>修改安全域名的时候一定要先确定好是否正确，因为每个月域名只能修改<span style="color:red">3</span>次。<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/4.jpg" alt="安全域名">  </p>
<h4 id="二、引入js文件"><a href="#二、引入js文件" class="headerlink" title="二、引入js文件"></a>二、引入js文件</h4><p>这就不用多说了，在页面中直接引用：<br><a href="http://res.wx.qq.com/open/js/jweixin-1.2.0.js" target="_blank" rel="external">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a></p>
<h4 id="三、通过config接口注入权限验证配置"><a href="#三、通过config接口注入权限验证配置" class="headerlink" title="三、通过config接口注入权限验证配置"></a>三、通过config接口注入权限验证配置</h4><p>（依旧还是官方图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/5.jpg" alt="配置config">  </p>
<h4 id="四、通过ready处理验证成功的事件"><a href="#四、通过ready处理验证成功的事件" class="headerlink" title="四、通过ready处理验证成功的事件"></a>四、通过ready处理验证成功的事件</h4><p><span style="color:red">这里注意一下，如果需要页面一加载就调用相关的接口，则要把相关的接口放在ready方法中，如果需要用户触发时候调用，则不用放在ready中。 </span><br>（老规矩官方图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/6.jpg" alt="配置config">  </p>
<h4 id="五、通过error处理失败的验证"><a href="#五、通过error处理失败的验证" class="headerlink" title="五、通过error处理失败的验证"></a>五、通过error处理失败的验证</h4><p>失败处理这个就没啥说的了，直接上官方图：<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/7.jpg" alt="配置config">  </p>
<h4 id="最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access-token和jsapi-ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。"><a href="#最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access-token和jsapi-ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。" class="headerlink" title="最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access_token和jsapi_ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。"></a>最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access_token和jsapi_ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。</h4>]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信用户授权（获取用户信息）踩坑与总结]]></title>
      <url>/2017/12/11/%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83%EF%BC%88%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%89%E8%B8%A9%E5%9D%91%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="正文开始前先说一下整个微信用户授权的整体流程："><a href="#正文开始前先说一下整个微信用户授权的整体流程：" class="headerlink" title="正文开始前先说一下整个微信用户授权的整体流程："></a>正文开始前先说一下整个微信用户授权的整体流程：</h4><p>公众号配置回调域名——&gt;获取微信授权code——&gt;用code获取access_token——&gt;用access_token获取用户信息。</p>
<h3 id="一、配置授权回调域名"><a href="#一、配置授权回调域名" class="headerlink" title="一、配置授权回调域名"></a>一、配置授权回调域名</h3><p>登陆微信公众平台，左侧边栏点击“公众号设置”，弹出页中选择“功能设置”，下方“网页授权域名”后面点击“设置”按钮，在弹出的页面中填上”授权回调页面域名”，<span style="color:#ff0020">需要注意的是，此处的回调域名要与代码中实际的回调域名一致，并且特别提醒下，我们在测试环境下测试完成后记得要在公众号里把回调域名和代码中都改成生产环境下的域名。</span><br>授权域名填写完成后要把微信提供的一个txt文件放到该域名指向的web服务器下面，如果填写的是一个路径，则放在该路径下面。<span style="color:#ff0020">同样此处特别提下，如果项目使用了类似slim一样的框架，该txt文件要放到入口页面所在的文件夹下面。 </span>比如我做过的一个项目入口在public-&gt;index.php，所以txt我就放在了和public目录下面。<br><img src="/2017/12/11/微信用户授权（获取用户信息）踩坑与总结/1.jpg" alt="fiddler配置图片"></p>
<h3 id="二、获取code"><a href="#二、获取code" class="headerlink" title="二、获取code"></a>二、获取code</h3><p>引导用户进入如下页面：<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="external">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a><br>介绍一下链接中的参数：<br>1.appid：公众号的唯一标识，在公众平台中可以获取。<br>2.redirect_uri：微信授权后重定向的回调链接地址，记得要对其进行urlencode。在这里有个坑，<span style="color:#ff0020">该回调地址其实就是页面在经过微信的授权后要返回到哪个页面，可以是任意一个你想要回调的路径。</span><br>3.response_type：返回类型，写code就行。<br>4.scope：应用授权作用域，关于这个参数要多说一句，scope的值可以写两种类型，一个是snsapi_base，另一个是snsapi_userinfo，这两个的区别是前者不会弹出授权页面，直接跳转，用户不会感觉到授权的过程，但是只能获取到openid，<span style="color:#ff0020">并且需要用户关注公众号</span>。后者会弹出一个授权的页面，经过用户的同意后才能获得授权信息，<span style="color:#ff0020">即使用户未关注也能获取到用户信息</span>，并且包含昵称、性别、所在地等等。<br>5.state：state为一个a-zA-Z0-9的参数值，可以随便写，写1也行。 对了，该参数非必需，其他5个参数为必须项。<br>6.#wechat_redirect：无论直接打开还是做页面302重定向时候，必须带此参数,直接写在后面就行。  </p>
<h3 id="三、通过code获取access-token"><a href="#三、通过code获取access-token" class="headerlink" title="三、通过code获取access_token"></a>三、通过code获取access_token</h3><p>此处注意，<span style="color:#ff0020">获取access_token的步骤必须要在服务器端进行，因为appid和secret不能外露，必须保存在服务器上。</span><br>获取到code后，用get方法请求一下链接来获取access_token：<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="external">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a><br>继续介绍一下链接中的参数：<br>1.appid：公众号的唯一标识，公众号设置中可以获得，这个不多说了。<br>2.secret：同appid，也在公众号设置中可以获得。<br>3.code：此code为步骤二中获取到的code。<br>4.grant_type：  填写为authorization_code，写死即可。<br>正确请求时返回如下，看图就行了：<br><img src="/2017/12/11/微信用户授权（获取用户信息）踩坑与总结/2.jpg" alt="fiddler配置图片">  </p>
<h3 id="四、通过access-token获取用户信息"><a href="#四、通过access-token获取用户信息" class="headerlink" title="四、通过access_token获取用户信息"></a>四、通过access_token获取用户信息</h3><p>终于到了最后一步了，用步骤三获取到的acess_token，用get方法，请求如下链接：<a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN" target="_blank" rel="external">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a> ，（官方说请使用https协议）<br>照例解释下参数：<br>1.access_token：步骤三获取到的acess_token，注意此token为网页接口授权凭证，与公众号分享时用到的基础支持的access_token不同。<br>2.openid：用户的唯一标识，步骤三获取access_token时获取到的openid，用于识别用户。<br>3.long：返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语，在中国直接写zh_CN就行。<br>正确返回时信息如下，看图，终于得到了我们梦寐以求的用户信息了。。。：<br><img src="/2017/12/11/微信用户授权（获取用户信息）踩坑与总结/3.jpg" alt="fiddler配置图片"><br>继续介绍参数，大家一看就知道是什么意思，我就直接引用官网说明了:<br>1.openid：用户的唯一标识。<br>2.nickname：用户昵称。<br>3.sex：用户的性别，值为1时是男性，值为2时是女性，值为0时是未知。<br>4.province：    用户个人资料填写的省份。<br>5.city：普通用户个人资料填写的城市。<br>6.country：国家，如中国为CN。<br>7.headimgurl：用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。<br>8.privilege：用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）。<br>9.unionid：只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。  </p>
<h3 id="五、最后其他"><a href="#五、最后其他" class="headerlink" title="五、最后其他"></a>五、最后其他</h3><p> 如果调用错误时会返回json数据：<br> {“error”:40003,”errmsg”:”invalid openid”}</p>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用fiddler进行手机抓包]]></title>
      <url>/2017/10/12/%E7%94%A8fiddler%E8%BF%9B%E8%A1%8C%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>网上已经有了很多fiddler的抓包方法，本篇文章仅用于记录我自己对fiddler进行收集抓包的相关设置。  </p>
<p>要保证手机抓包能够顺利进行，手机与电脑一定要保持在同一个网段中，好了，正文开始：</p>
<h3 id="一、pc上的参数设置"><a href="#一、pc上的参数设置" class="headerlink" title="一、pc上的参数设置"></a>一、pc上的参数设置</h3><h5 id="1-允许监听https"><a href="#1-允许监听https" class="headerlink" title="1.允许监听https"></a>1.允许监听https</h5><p>依次点击’Tools’-&gt;’Options’-&gt;’Https’-&gt;,勾选如下几个：’Capture HTTPS CONNECTS’,’Derypt HTTPS traffic’,’Ignore server certificate errors(unsafe)’,然后点击’OK’。<br><img src="/2017/10/12/用fiddler进行手机抓包/fiddler1.jpg" alt="fiddler配置图片"></p>
<h5 id="2-允许远程连接"><a href="#2-允许远程连接" class="headerlink" title="2.允许远程连接"></a>2.允许远程连接</h5><p>依次点击’Tools’-&gt;’Options’-&gt;’Connections’,勾选’Allow remote computers to connect’,默认端口为8888，如有占用可以换为其他端口，然后重启fiddler。<br><img src="/2017/10/12/用fiddler进行手机抓包/fiddler2.jpg" alt="fiddler配置图片"></p>
<h3 id="二、手机端上的参数设置"><a href="#二、手机端上的参数设置" class="headerlink" title="二、手机端上的参数设置"></a>二、手机端上的参数设置</h3><p>下方的设置是针对安卓手机的，理论上苹果首页也是同样的操作，但是我还没搞清楚ios11如何安装证书，所以等到日后清楚后再更新苹果上的配置方法。<br>配置前需要先知道电脑的ip地址，fiddler的端口号。</p>
<h5 id="1-手机和电脑链接到同一网络，在手机浏览器上输入：http-ip-端口号"><a href="#1-手机和电脑链接到同一网络，在手机浏览器上输入：http-ip-端口号" class="headerlink" title="1.手机和电脑链接到同一网络，在手机浏览器上输入：http://ip:端口号"></a>1.手机和电脑链接到同一网络，在手机浏览器上输入：<a href="http://ip:端口号" target="_blank" rel="external">http://ip:端口号</a></h5><h5 id="2-前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’"><a href="#2-前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’" class="headerlink" title="2.前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’"></a>2.前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’</h5><p><img src="/2017/10/12/用fiddler进行手机抓包/fiddler3.jpg" alt="fiddler配置图片"><br><br><br><br> </p>
<h5 id="3-下载完之后填写证书名称，点击确定"><a href="#3-下载完之后填写证书名称，点击确定" class="headerlink" title="3.下载完之后填写证书名称，点击确定"></a>3.下载完之后填写证书名称，点击确定</h5><p><img src="/2017/10/12/用fiddler进行手机抓包/fiddler4.jpg" alt="fiddler配置图片"><br><br><br><br> </p>
<h5 id="4-要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。"><a href="#4-要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。" class="headerlink" title="4.要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。"></a>4.要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。</h5><h5 id="5-更改手机无线网的代理"><a href="#5-更改手机无线网的代理" class="headerlink" title="5.更改手机无线网的代理"></a>5.更改手机无线网的代理</h5><p>手机上点击无线网-&gt;’修改网络配置’-&gt;’显示高级选项’-&gt;’代理服务器’-&gt;’手动’,ip设置为电脑的ip，端口号设置为fiddler设置的端口号。<br>到此，所有设置已经完成，抓包完成后记得把代理关掉，不然可能没法正常上网。</p>
]]></content>
      
        <categories>
            
            <category> 综合，杂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 综合，杂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>/2017/10/01/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="一、代码片段"><a href="#一、代码片段" class="headerlink" title="一、代码片段"></a>一、代码片段</h3><p>把代码放在``之中即可。</p>
<h3 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h3><p>1.#一级标题<br><br>2.##二级标题<br><br>3.###三级标题<br><br>4.####四级标题<br><br>5.#####五级标题<br><br>6.######六级标题<br></p>
<h3 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h3><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h4><p> 无序列表用”-“或者“<em>”表示，代码为：`</em><code>或者</code>-`。</p>
<h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h4><p> 有序列表直接用“数字”加“.”组成：“1.”，“2.”，“3.”。代码为：<code>1.，2.，3.</code></p>
<h3 id="四、引用"><a href="#四、引用" class="headerlink" title="四、引用"></a>四、引用</h3><p>引用指的是引用一段别处的话，使用“&gt;”表示，在要引用的文本前加上“&gt;”即可，代码为：<code>&gt; 引用的内容</code>。</p>
<h3 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h3><p>用markdown插入图片语法为：<br></p>
<p>一个惊叹号!+一个方括号[]，方括号里放图片的替代文字+一个普通括号()，里面放上图片的网址，网址后面可以接着用引号“”，引号中包住的是图片的title，代码为：<code>![alt](url：*******)</code>。</p>
<p>另：markdown插入图片的语法目前还不支持指定图片的宽高，如果要指定宽高，可以直接用html的<code>&lt;img&gt;</code>标签。</p>
<h3 id="六、粗体和斜体"><a href="#六、粗体和斜体" class="headerlink" title="六、粗体和斜体"></a>六、粗体和斜体</h3><p>粗体用两个星号“<strong>”包围文本即可，</strong>我是粗体<strong>，代码为：`</strong>我是粗体<em>*`。 <br><br>斜体用一个星号“</em>”包围文本即可，<em>我是斜体</em>，代码为：<code>*我是斜体*</code>。</p>
<h3 id="七、分割线"><a href="#七、分割线" class="headerlink" title="七、分割线"></a>七、分割线</h3><p>分割线使用三个<strong><em>号表示，代码为：`</em></strong>`。</p>
<h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><p><code>| Tables        | Are           | Cool  |</code><br><br><br><code>| ------------- |:-------------:| -----:|</code><br><br><br><code>| col 3 is      | right-aligned | $1600 |</code><br><br><br><code>| col 2 is      | centered      |   $12 |</code><br><br><br><code>| zebra stripes | are neat      |    $1 |</code><br><br></p>
<p>效果为：<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>
<h3 id="九、换行"><a href="#九、换行" class="headerlink" title="九、换行"></a>九、换行</h3><p>markdown因为也支持html语法，所以换行可以直接使用html的<code>&lt;br&gt;</code>标签，但是经过测试发现用<code>&lt;br&gt;</code>进行换行会导致行间距过大，解决这个问题可以使用”先按两下空格，再按回车的方法”，测试后发现此方法产生的行间距还是可以接受的。</p>
]]></content>
      
        <categories>
            
            <category> 综合，杂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 综合，杂 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
