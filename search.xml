<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[微信分享配置以及相关参数获取方法]]></title>
      <url>/2017/12/25/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近和客户端做了很多需要分享到微信的H5，其中涉及到分享功能的配置，踩了几个坑，特此记录。</p>
<h4 id="先整体说一下思路："><a href="#先整体说一下思路：" class="headerlink" title="先整体说一下思路："></a>先整体说一下思路：</h4><p>微信公众平台中设置JS接口安全域名 ——&gt;H5页面中引入微信js：<a href="http://res.wx.qq.com/open/js/jweixin-1.2.0.js" target="_blank" rel="external">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a>) ——&gt; 从服务器获取timestamp，nonceStr，signature ——&gt; 在wx.ready中调用分享接口。  </p>
<h3 id="要在服务端进行的："><a href="#要在服务端进行的：" class="headerlink" title="要在服务端进行的："></a>要在服务端进行的：</h3><h4 id="一、获取access-token"><a href="#一、获取access-token" class="headerlink" title="一、获取access_token"></a>一、获取access_token</h4><p>获取access_token的目的是用来获取jsapi_ticket，那么什么是jsapi_ticket？用官方的话说，jsapi_ticket是微信公众号用于调用js接口的临时票据，通俗点说就是要想调用微信的js接口，就要先获取jsapi_ticket，<span style="color:red">在获取access_token前要注意一点：一定要先到公众平台设置ip白名单，否则在获取token时会提示：”invalid ip xxx.xxx.xxx.xxx, not in whitelist hint: [yaulkA0408b705]”</span>，设置完白名单后就可以安心的用下面的方法获取token了：  </p>
<p>获取access_token方法如下：通过get方法请求此地址：<br><a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=SECRET" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=SECRET</a><br>解释下参数：grant_type就写死“client_credential”即可，appid为公众号的appi，secret为公众号的secret，这两个都可以在微信公众平台获取。<br>注意：access_token的有效期为2个小时，需要定时进行刷新。<br>正确请求的情况下会返回access_token和expires_in（过期时间）。</p>
<h4 id="二、获取jsapi-ticket"><a href="#二、获取jsapi-ticket" class="headerlink" title="二、获取jsapi_ticket"></a>二、获取jsapi_ticket</h4><p>用第一步拿到的access_token，用get方法请求：<br><a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi" target="_blank" rel="external">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a><br>成功返回如下：(借用下官方的图)<br><img src="/2017/12/25/微信分享配置以及相关参数获取方法/1.jpg" alt="成功返回信息"><br><span style="color:red">此处注意：jsapi_ticket和token一样有效期都为7200秒，而且每天获取token和jsapi_ticket的次数有限，所以必须要在服务端缓存jsapi_ticket和access_token，每7200秒的时候才获取一次。</span></p>
<h4 id="三、生成签名"><a href="#三、生成签名" class="headerlink" title="三、生成签名"></a>三、生成签名</h4><p>需要参与签名的参数如下：<br>1.noncestr（随机字符串）<br>2.步骤二中获取到的jsapi_ticket<br>3.timestamp（时间戳）<br>4.当前网页的URL，不包括#及其后面部分，可通过location.href.split(‘#’)[0]获取  </p>
<p>对以上所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串string1。这里需要注意的是所有参数名均为小写字符。对string1作sha1加密，字段名和字段值都采用原始值，不进行URL 转义。即signature=sha1(string1)。<br>示例：（再借用一下官方的图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/2.jpg" alt="string1"><br>然后对string1进行sha1签名，即可得到signature。如下（还是借用官方的图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/3.jpg" alt="sha1签名">  </p>
<p><span style="color:red">此处注意了，有一个小坑，签名的URL必须和调用JS接口的url一致，比较保险的方法是前端直接获取页面的url然后传给后端进行签名，这样即使url中有动态的参数也不会出现签名的url和页面的url不一致而导致签名失败的情况。</span>  </p>
<h4 id="好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。"><a href="#好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。" class="headerlink" title="好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。"></a>好了，到此为止前三步都是在服务端进行的，下面开始则是前端页面的配置。</h4><h3 id="要在前端页面中进行的："><a href="#要在前端页面中进行的：" class="headerlink" title="要在前端页面中进行的："></a>要在前端页面中进行的：</h3><h4 id="一、在公众平台中设置安全域名"><a href="#一、在公众平台中设置安全域名" class="headerlink" title="一、在公众平台中设置安全域名"></a>一、在公众平台中设置安全域名</h4><p>安全域名的设置要注意一下，只写域名就好，不用写http，记得要把微信提供的txt文件放在域名的根目录下，要保证域名可以访问到这个txt文件，可以在浏览器里输入域名+txt文件的名字来测试txt位置是否放置正确。<br>修改安全域名的时候一定要先确定好是否正确，因为每个月域名只能修改<span style="color:red">3</span>次。<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/4.jpg" alt="安全域名">  </p>
<h4 id="二、引入js文件"><a href="#二、引入js文件" class="headerlink" title="二、引入js文件"></a>二、引入js文件</h4><p>这就不用多说了，在页面中直接引用：<br><a href="http://res.wx.qq.com/open/js/jweixin-1.2.0.js" target="_blank" rel="external">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a></p>
<h4 id="三、通过config接口注入权限验证配置"><a href="#三、通过config接口注入权限验证配置" class="headerlink" title="三、通过config接口注入权限验证配置"></a>三、通过config接口注入权限验证配置</h4><p>（依旧还是官方图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/5.jpg" alt="配置config">  </p>
<h4 id="四、通过ready处理验证成功的事件"><a href="#四、通过ready处理验证成功的事件" class="headerlink" title="四、通过ready处理验证成功的事件"></a>四、通过ready处理验证成功的事件</h4><p><span style="color:red">这里注意一下，如果需要页面一加载就调用相关的接口，则要把相关的接口放在ready方法中，如果需要用户触发时候调用，则不用放在ready中。 </span><br>（老规矩官方图）<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/6.jpg" alt="配置config">  </p>
<h4 id="五、通过error处理失败的验证"><a href="#五、通过error处理失败的验证" class="headerlink" title="五、通过error处理失败的验证"></a>五、通过error处理失败的验证</h4><p>失败处理这个就没啥说的了，直接上官方图：<br> <img src="/2017/12/25/微信分享配置以及相关参数获取方法/7.jpg" alt="配置config">  </p>
<h4 id="最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access-token和jsapi-ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。"><a href="#最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access-token和jsapi-ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。" class="headerlink" title="最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access_token和jsapi_ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。"></a>最后呢，总结一下，微信的分享的相关的配置多数还是在服务端完成，注意一下签名的url要和页面的url一致，安全域名填写正确，access_token和jsapi_ticket都在服务端缓存好。好了，微信分享的配置就说到这里了。</h4>]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信用户授权（获取用户信息）踩坑与总结]]></title>
      <url>/2017/12/11/%E5%BE%AE%E4%BF%A1%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83%EF%BC%88%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%89%E8%B8%A9%E5%9D%91%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h4 id="正文开始前先说一下整个微信用户授权的整体流程："><a href="#正文开始前先说一下整个微信用户授权的整体流程：" class="headerlink" title="正文开始前先说一下整个微信用户授权的整体流程："></a>正文开始前先说一下整个微信用户授权的整体流程：</h4><p>公众号配置回调域名——&gt;获取微信授权code——&gt;用code获取access_token——&gt;用access_token获取用户信息。</p>
<h3 id="一、配置授权回调域名"><a href="#一、配置授权回调域名" class="headerlink" title="一、配置授权回调域名"></a>一、配置授权回调域名</h3><p>登陆微信公众平台，左侧边栏点击“公众号设置”，弹出页中选择“功能设置”，下方“网页授权域名”后面点击“设置”按钮，在弹出的页面中填上”授权回调页面域名”，<span style="color:#ff0020">需要注意的是，此处的回调域名要与代码中实际的回调域名一致，并且特别提醒下，我们在测试环境下测试完成后记得要在公众号里把回调域名和代码中都改成生产环境下的域名。</span><br>授权域名填写完成后要把微信提供的一个txt文件放到该域名指向的web服务器下面，如果填写的是一个路径，则放在该路径下面。<span style="color:#ff0020">同样此处特别提下，如果项目使用了类似slim一样的框架，该txt文件要放到入口页面所在的文件夹下面。 </span>比如我做过的一个项目入口在public-&gt;index.php，所以txt我就放在了和public目录下面。<br><img src="/2017/12/11/微信用户授权（获取用户信息）踩坑与总结/1.jpg" alt="fiddler配置图片"></p>
<h3 id="二、获取code"><a href="#二、获取code" class="headerlink" title="二、获取code"></a>二、获取code</h3><p>引导用户进入如下页面：<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="external">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a><br>介绍一下链接中的参数：<br>1.appid：公众号的唯一标识，在公众平台中可以获取。<br>2.redirect_uri：微信授权后重定向的回调链接地址，记得要对其进行urlencode。在这里有个坑，<span style="color:#ff0020">该回调地址其实就是页面在经过微信的授权后要返回到哪个页面，可以是任意一个你想要回调的路径。</span><br>3.response_type：返回类型，写code就行。<br>4.scope：应用授权作用域，关于这个参数要多说一句，scope的值可以写两种类型，一个是snsapi_base，另一个是snsapi_userinfo，这两个的区别是前者不会弹出授权页面，直接跳转，用户不会感觉到授权的过程，但是只能获取到openid，<span style="color:#ff0020">并且需要用户关注公众号</span>。后者会弹出一个授权的页面，经过用户的同意后才能获得授权信息，<span style="color:#ff0020">即使用户未关注也能获取到用户信息</span>，并且包含昵称、性别、所在地等等。<br>5.state：state为一个a-zA-Z0-9的参数值，可以随便写，写1也行。 对了，该参数非必需，其他5个参数为必须项。<br>6.#wechat_redirect：无论直接打开还是做页面302重定向时候，必须带此参数,直接写在后面就行。  </p>
<h3 id="三、通过code获取access-token"><a href="#三、通过code获取access-token" class="headerlink" title="三、通过code获取access_token"></a>三、通过code获取access_token</h3><p>此处注意，<span style="color:#ff0020">获取access_token的步骤必须要在服务器端进行，因为appid和secret不能外露，必须保存在服务器上。</span><br>获取到code后，用get方法请求一下链接来获取access_token：<a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="external">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a><br>继续介绍一下链接中的参数：<br>1.appid：公众号的唯一标识，公众号设置中可以获得，这个不多说了。<br>2.secret：同appid，也在公众号设置中可以获得。<br>3.code：此code为步骤二中获取到的code。<br>4.grant_type：  填写为authorization_code，写死即可。<br>正确请求时返回如下，看图就行了：<br><img src="/2017/12/11/微信用户授权（获取用户信息）踩坑与总结/2.jpg" alt="fiddler配置图片">  </p>
<h3 id="四、通过access-token获取用户信息"><a href="#四、通过access-token获取用户信息" class="headerlink" title="四、通过access_token获取用户信息"></a>四、通过access_token获取用户信息</h3><p>终于到了最后一步了，用步骤三获取到的acess_token，用get方法，请求如下链接：<a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN" target="_blank" rel="external">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a> ，（官方说请使用https协议）<br>照例解释下参数：<br>1.access_token：步骤三获取到的acess_token，注意此token为网页接口授权凭证，与公众号分享时用到的基础支持的access_token不同。<br>2.openid：用户的唯一标识，步骤三获取access_token时获取到的openid，用于识别用户。<br>3.long：返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语，在中国直接写zh_CN就行。<br>正确返回时信息如下，看图，终于得到了我们梦寐以求的用户信息了。。。：<br><img src="/2017/12/11/微信用户授权（获取用户信息）踩坑与总结/3.jpg" alt="fiddler配置图片"><br>继续介绍参数，大家一看就知道是什么意思，我就直接引用官网说明了:<br>1.openid：用户的唯一标识。<br>2.nickname：用户昵称。<br>3.sex：用户的性别，值为1时是男性，值为2时是女性，值为0时是未知。<br>4.province：    用户个人资料填写的省份。<br>5.city：普通用户个人资料填写的城市。<br>6.country：国家，如中国为CN。<br>7.headimgurl：用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。<br>8.privilege：用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）。<br>9.unionid：只有在用户将公众号绑定到微信开放平台帐号后，才会出现该字段。  </p>
<h3 id="五、最后其他"><a href="#五、最后其他" class="headerlink" title="五、最后其他"></a>五、最后其他</h3><p> 如果调用错误时会返回json数据：<br> {“error”:40003,”errmsg”:”invalid openid”}</p>
]]></content>
      
        <categories>
            
            <category> 微信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用fiddler进行手机抓包]]></title>
      <url>/2017/10/12/%E7%94%A8fiddler%E8%BF%9B%E8%A1%8C%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>网上已经有了很多fiddler的抓包方法，本篇文章仅用于记录我自己对fiddler进行收集抓包的相关设置。  </p>
<p>要保证手机抓包能够顺利进行，手机与电脑一定要保持在同一个网段中，好了，正文开始：</p>
<h3 id="一、pc上的参数设置"><a href="#一、pc上的参数设置" class="headerlink" title="一、pc上的参数设置"></a>一、pc上的参数设置</h3><h5 id="1-允许监听https"><a href="#1-允许监听https" class="headerlink" title="1.允许监听https"></a>1.允许监听https</h5><p>依次点击’Tools’-&gt;’Options’-&gt;’Https’-&gt;,勾选如下几个：’Capture HTTPS CONNECTS’,’Derypt HTTPS traffic’,’Ignore server certificate errors(unsafe)’,然后点击’OK’。<br><img src="/2017/10/12/用fiddler进行手机抓包/fiddler1.jpg" alt="fiddler配置图片"></p>
<h5 id="2-允许远程连接"><a href="#2-允许远程连接" class="headerlink" title="2.允许远程连接"></a>2.允许远程连接</h5><p>依次点击’Tools’-&gt;’Options’-&gt;’Connections’,勾选’Allow remote computers to connect’,默认端口为8888，如有占用可以换为其他端口，然后重启fiddler。<br><img src="/2017/10/12/用fiddler进行手机抓包/fiddler2.jpg" alt="fiddler配置图片"></p>
<h3 id="二、手机端上的参数设置"><a href="#二、手机端上的参数设置" class="headerlink" title="二、手机端上的参数设置"></a>二、手机端上的参数设置</h3><p>下方的设置是针对安卓手机的，理论上苹果首页也是同样的操作，但是我还没搞清楚ios11如何安装证书，所以等到日后清楚后再更新苹果上的配置方法。<br>配置前需要先知道电脑的ip地址，fiddler的端口号。</p>
<h5 id="1-手机和电脑链接到同一网络，在手机浏览器上输入：http-ip-端口号"><a href="#1-手机和电脑链接到同一网络，在手机浏览器上输入：http-ip-端口号" class="headerlink" title="1.手机和电脑链接到同一网络，在手机浏览器上输入：http://ip:端口号"></a>1.手机和电脑链接到同一网络，在手机浏览器上输入：<a href="http://ip:端口号" target="_blank" rel="external">http://ip:端口号</a></h5><h5 id="2-前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’"><a href="#2-前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’" class="headerlink" title="2.前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’"></a>2.前往地址后会出现下载证书的页面，点击’点击FiddlerRootcertificate下载证书’</h5><p><img src="/2017/10/12/用fiddler进行手机抓包/fiddler3.jpg" alt="fiddler配置图片"><br><br><br><br> </p>
<h5 id="3-下载完之后填写证书名称，点击确定"><a href="#3-下载完之后填写证书名称，点击确定" class="headerlink" title="3.下载完之后填写证书名称，点击确定"></a>3.下载完之后填写证书名称，点击确定</h5><p><img src="/2017/10/12/用fiddler进行手机抓包/fiddler4.jpg" alt="fiddler配置图片"><br><br><br><br> </p>
<h5 id="4-要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。"><a href="#4-要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。" class="headerlink" title="4.要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。"></a>4.要求设置一个密码，自己设置一个就好，如果不用就去手机设置中去掉就好。</h5><h5 id="5-更改手机无线网的代理"><a href="#5-更改手机无线网的代理" class="headerlink" title="5.更改手机无线网的代理"></a>5.更改手机无线网的代理</h5><p>手机上点击无线网-&gt;’修改网络配置’-&gt;’显示高级选项’-&gt;’代理服务器’-&gt;’手动’,ip设置为电脑的ip，端口号设置为fiddler设置的端口号。<br>到此，所有设置已经完成，抓包完成后记得把代理关掉，不然可能没法正常上网。</p>
]]></content>
      
        <categories>
            
            <category> 综合，杂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 综合，杂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法]]></title>
      <url>/2017/10/01/markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="一、代码片段"><a href="#一、代码片段" class="headerlink" title="一、代码片段"></a>一、代码片段</h3><p>把代码放在``之中即可。</p>
<h3 id="二、标题"><a href="#二、标题" class="headerlink" title="二、标题"></a>二、标题</h3><p>1.#一级标题<br><br>2.##二级标题<br><br>3.###三级标题<br><br>4.####四级标题<br><br>5.#####五级标题<br><br>6.######六级标题<br></p>
<h3 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h3><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h4><p> 无序列表用”-“或者“<em>”表示，代码为：`</em><code>或者</code>-`。</p>
<h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h4><p> 有序列表直接用“数字”加“.”组成：“1.”，“2.”，“3.”。代码为：<code>1.，2.，3.</code></p>
<h3 id="四、引用"><a href="#四、引用" class="headerlink" title="四、引用"></a>四、引用</h3><p>引用指的是引用一段别处的话，使用“&gt;”表示，在要引用的文本前加上“&gt;”即可，代码为：<code>&gt; 引用的内容</code>。</p>
<h3 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h3><p>用markdown插入图片语法为：<br></p>
<p>一个惊叹号!+一个方括号[]，方括号里放图片的替代文字+一个普通括号()，里面放上图片的网址，网址后面可以接着用引号“”，引号中包住的是图片的title，代码为：<code>![alt](url：*******)</code>。</p>
<p>另：markdown插入图片的语法目前还不支持指定图片的宽高，如果要指定宽高，可以直接用html的<code>&lt;img&gt;</code>标签。</p>
<h3 id="六、粗体和斜体"><a href="#六、粗体和斜体" class="headerlink" title="六、粗体和斜体"></a>六、粗体和斜体</h3><p>粗体用两个星号“<strong>”包围文本即可，</strong>我是粗体<strong>，代码为：`</strong>我是粗体<em>*`。 <br><br>斜体用一个星号“</em>”包围文本即可，<em>我是斜体</em>，代码为：<code>*我是斜体*</code>。</p>
<h3 id="七、分割线"><a href="#七、分割线" class="headerlink" title="七、分割线"></a>七、分割线</h3><p>分割线使用三个<strong><em>号表示，代码为：`</em></strong>`。</p>
<h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><p><code>| Tables        | Are           | Cool  |</code><br><br><br><code>| ------------- |:-------------:| -----:|</code><br><br><br><code>| col 3 is      | right-aligned | $1600 |</code><br><br><br><code>| col 2 is      | centered      |   $12 |</code><br><br><br><code>| zebra stripes | are neat      |    $1 |</code><br><br></p>
<p>效果为：<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>
<h3 id="九、换行"><a href="#九、换行" class="headerlink" title="九、换行"></a>九、换行</h3><p>markdown因为也支持html语法，所以换行可以直接使用html的<code>&lt;br&gt;</code>标签，但是经过测试发现用<code>&lt;br&gt;</code>进行换行会导致行间距过大，解决这个问题可以使用”先按两下空格，再按回车的方法”，测试后发现此方法产生的行间距还是可以接受的。</p>
]]></content>
      
        <categories>
            
            <category> 综合，杂 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 综合，杂 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
